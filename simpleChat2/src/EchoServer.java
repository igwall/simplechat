// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.*;import com.lloseng.ocsf.server.*;import common.ChatIF;/** * This class overrides some of the methods in the abstract  * superclass in order to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @author Fran&ccedil;ois B&eacute;langer * @author Paul Holden * @version July 2000 */public class EchoServer extends AbstractServer {  //Class variables *************************************************  	/**	 * Instance of the server UI.	 */  private ChatIF serverUI;    //Constructors ****************************************************    /**   * Constructs an instance of the echo server.   *   * @param port The port number to connect on.   */  public EchoServer(int port, ChatIF serverUI)   {    super(port);    this.serverUI = serverUI;  }  //Instance methods ************************************************    /**   * This method handles any messages received from the client.   *   * @param msg The message received from the client.   * @param client The connection from which the message originated.   */  public void handleMessageFromClient    (Object msg, ConnectionToClient client)  {    String message = (String) msg;     String[] command = ChatIF.parseCommand(message);    String username = (String) client.getInfo("username");        if (command == null)    {    	// If it's not a command    	if (username == null) {    		try {					client.sendToClient("You should first login with #login <username>.");					client.sendToClient("#quit");					client.close();				} catch (IOException e) { }    	} else {    		serverUI.display("Message received: " + msg + " from " + username + " " + client);	      this.sendToAllClients(username + "> " + msg);    	}    } else     {    	switch (command[0])    	{    	case "login":    		if (username == null && command.length >= 2) {    			client.setInfo("username", command[1]);    		} else {    			try {						client.sendToClient("You can't change your username once connected.");					} catch (IOException e) { }    		}    		break;    	}    }  }  /**   * This method handles any messages received from the server UI.   *    * @param message The message to handle.   */	public void handleMessageFromServerUI(String message)	{		String[] command = ChatIF.parseCommand(message);		if (command == null) {			sendMessage(message);		} else {			handleCommand(command);		}	}		/**	 * The server console send a message to all the clients. 	 */	public void sendMessage(String message)	{		this.sendToAllClients("Server MSG> " + message);	}		/**	 * Handle command from the server.	 * 	 * @param command The command the handle.	 */	public void handleCommand(String[] command)	{		switch (command[0])  	{  	case "quit":  		stopListening();  		System.exit(0);  		break;  	case "stop":  		stopListening();  		break;  	case "close":  		stopListening();  		try   		{				close();			} catch (IOException e) { }  		break;  	case "setport":  		if (command.length < 2) {  			serverUI.display("No port provided. The command is #setport <port>.");  		} else if (this.isListening()) {  			serverUI.display("Can't change the port while listening. Please first use #close.");  		} else {  			try {  				int port = Integer.parseInt(command[1]);  				setPort(port);  			} catch (NumberFormatException e) {  				serverUI.display("Invalid port number.");  			}  		}  		break;  	case "getport":  		serverUI.display(Integer.toString(getPort()));  		break;  	case "start":  		if (isListening()) {  			serverUI.display("Can't change the port while listening. Please first use #close.");  		} else {  			try {					listen();				} catch (IOException e) { }  		}  		break;  	default:  		serverUI.display("Not a valid command.");  		break;  	}	}      /**   * This method overrides the one in the superclass.  Called   * when the server starts listening for connections.   */  protected void serverStarted()  {    serverUI.display("Server listening for connections on port " + getPort());  }    /**   * This method overrides the one in the superclass.  Called   * when the server stops listening for connections.   */  protected void serverStopped()  {  	serverUI.display("Server has stopped listening for connections.");  }  @Override  protected void clientConnected(ConnectionToClient client)   {  	serverUI.display("Client connected.");  }    @Override  synchronized protected void clientDisconnected(ConnectionToClient client)   {  	serverUI.display("Client disconnected.");  }}//End of EchoServer class