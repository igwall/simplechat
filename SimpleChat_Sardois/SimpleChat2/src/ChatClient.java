// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import com.lloseng.ocsf.client.*;import common.*;import java.io.*;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient extends AbstractClient{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;     //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port, ChatIF clientUI)     throws IOException   {    super(host, port); //Call the superclass constructor    this.clientUI = clientUI;    openConnection();  }    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    clientUI.display(msg.toString());  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {    try    {    	String[] command = ChatIF.parseCommand(message);    	if (command == null) {    		sendToServer(message);    	} else {    		handleClientCommand(command);    	}    }    catch(IOException e)    {      clientUI.display("Could not send message to server. Terminating client.");      quit();    }  }    /**   * Handle commands from the client.   * @param command The command to handle.   */  public void handleClientCommand(String[] command)  {  	switch (command[0])  	{  	case "quit":  		quit();  		break;  	case "logoff":  		try {  		closeConnection();  		} catch(IOException e) {}  		break;  	case "sethost":  		if (command.length < 2) {  			clientUI.display("No host provided. The command is #sethost <host>.");  		} else if (isConnected()) {  			clientUI.display("Can't change the host while connected to a server. Please first use #logoff.");  		} else {  			setHost(command[1]);  		}  		break;  	case "setport":  		if (command.length < 2) {  			clientUI.display("No port provided. The command is #setport <port>.");  		} else if (isConnected()) {  			clientUI.display("Can't change the port while connected to a server. Please first use #logoff.");  		} else {  			try {  				int port = Integer.parseInt(command[1]);  				setPort(port);  			} catch (NumberFormatException e) {  				clientUI.display("Invalid port number.");  			}  		}  		break;  	case "login":  		if (isConnected()) {  			clientUI.display("You are already connected to a server. Please first use #logoff.");  		} else {  			try {					openConnection();				} catch (IOException e) { }  		}  		break;  	case "gethost":  		clientUI.display(getHost());  		break;  	case "getport":  		clientUI.display(Integer.toString(getPort()));  		break;  	}  }    @Override  protected void connectionClosed()   {	  clientUI.display("Connection closed by the server.");  }    @Override  protected void connectionException(Exception exception)   {	  clientUI.display("Connection exception.");  }    /**   * This method terminates the client.   */  public void quit()  {    try    {      closeConnection();    }    catch(IOException e) {}    System.exit(0);  }}//End of ChatClient class