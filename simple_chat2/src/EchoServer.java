// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.*;import common.ChatIF;import common.Command;import ocsf.server.*;/** * This class overrides some of the methods in the abstract  * superclass in order to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @author Fran&ccedil;ois B&eacute;langer * @author Paul Holden * @version July 2000 */public class EchoServer extends AbstractServer {  //Class variables *************************************************    /**   * The default port to listen on.   */  final public static int DEFAULT_PORT = 5555;  ChatIF serverUI;  //Constructors ****************************************************    /**   * Constructs an instance of the echo server.   *   * @param port The port number to connect on.   */  public EchoServer(int port, ChatIF serverUI)  {    super(port);    this.serverUI = serverUI;  }    //Instance methods ************************************************    public void cmdHandler(String[] cmd, ConnectionToClient client){      switch (cmd[0]) {        case ("logout"):          try {            client.disconnect();          } catch (IOException e) {            e.getStackTrace();          }          break;      }    }  public void handleMessageFromServerUI(String message)  {    if(message.charAt(0) == '#'){      String[] cmd = Command.parse(message);      switch (cmd[0]) {        case "quit":          sendToAllClients("!disconnect");          try{            close();          }          catch(IOException e1){            System.out.println("Error while disconnecting clients. ");          }        case "stop" :          stopListening();          serverStopped();        case "close" :          sendToAllClients("!disconnected");          stopListening();          try{ close(); }catch(IOException e){ e.getStackTrace();}          serverStopped();        case "setport" :          setPort(Integer.parseInt(cmd[1]));        case "getport" :          System.out.println(this.getPort());        case "start" :          if(isListening()){            System.out.println("Couldn't start the server, already running !");          }          else{            try {              this.listen();            }            catch(IOException e){              e.getStackTrace();            }          }      }    }else{      try      {        sendToAllClients(message);      }      catch(Exception e){        serverUI.display("Could not send message to all the clients...");        e.getStackTrace();      }    }  }  /**   * This method handles any messages received from the client.   *   * @param msg The message received from the client.   * @param client The connection from which the message originated.   */  public void handleMessageFromClient (Object msg, ConnectionToClient client) {    String message = (String) msg;    if(message.charAt(0) == Command.symbol){      cmdHandler(Command.parse(message), client);    } else {      System.out.println("Message received: " + msg + " from " + client);      this.sendToAllClients(msg);    }  }      /**   * This method overrides the one in the superclass.  Called   * when the server starts listening for connections.   */  protected void serverStarted()  {    System.out.println      ("Server listening for connections on port " + getPort());  }    /**   * This method overrides the one in the superclass.  Called   * when the server stops listening for connections.   */  protected void serverStopped()  {    System.out.println      ("Server has stopped listening for connections.");  }  public void clientConnected(ConnectionToClient client){    System.out.println("Un nouveau client s'est connect√©");  }  public void clientDisconnected(ConnectionToClient client){    System.out.println("Client disconnected");  }  //Class methods ***************************************************    /**   * This method is responsible for the creation of    * the server instance (there is no UI in this phase).   *   * @param args The port number to listen on.  Defaults to 5555   *          if no argument is entered.   */  public static void main(String[] args)   {    int port = 0; //Port to listen on    try    {      port = Integer.parseInt(args[0]); //Get port from command line    }    catch(Throwable t)    {      port = DEFAULT_PORT; //Set port to 5555    }    ChatIF serverUI = new ServerConsole(port);    EchoServer sv = new EchoServer(port, serverUI);        try     {      sv.listen(); //Start listening for connections    }     catch (Exception ex)     {      System.out.println("ERROR - Could not listen for clients!");    }  }}//End of EchoServer class