// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import ocsf.client.*;import common.*;import java.io.*;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient extends AbstractClient{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;  String name;  //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String name, String host, int port, ChatIF clientUI)    throws IOException   {    super(host, port); //Call the superclass constructor    this.clientUI = clientUI;    this.name = name;    openConnection();  }    //Instance methods ************************************************  public void connectionClosed() {    clientUI.display("Server disconnected! Terminating client.");  }  public void connectionException() {    clientUI.display("Connection had an error! Terminating client.");  }      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    String str = (String) msg;    clientUI.display(str);    if(str.charAt(0) == '!'){      cmdServerHandler(Command.parse(str));    }    else if(str.charAt(0) == '&'){      str.substring(1);      clientUI.display("Server MSG> " + str);    }    else{      clientUI.display(str);    }  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {    try    {      sendToServer(message);    }    catch(IOException e)    {      clientUI.display        ("Could not send message to server.  Terminating client.");      quit();    }  }  public void setName(String name){    this.name = name;  }  public void cmdClientHandler(String[] cmd){    switch (cmd[0]){      case ("quit") :        // We ask the server for a clean quit        askToDisconnect();        break;      case "login":        if(isConnected()){          System.out.println("Already connected to a server, please disconnect before");        }        else{          this.setName(cmd[0]);          this.setHost(cmd[2]);          this.setPort(Integer.parseInt(cmd[3]));          try{            openConnection();          } catch(IOException ex){            System.out.println(ex.getStackTrace());          }        }        /*      case ("logoff") :        try{          client.closeConnection();        } catch (IOException ex1){          System.out.println(ex1.getStackTrace());        }        break;      case ("sethost") :        client.setHost(cmd[1]);        break;      case ("setport") :        client.setPort(Integer.parseInt(cmd[1]));        System.out.println("The listenning port is now: " + Integer.parseInt(cmd[1]));        break;      case ("login") :        break;      case ( "gethost") :        System.out.println(client.getHost());        break;      case ("getport") :        System.out.println(client.getPort());        break;       */    }  }  public void cmdServerHandler(String[] cmd) {    switch (cmd[0]) {      case "disconnect":        quit();        break;    }  }    /**   * This method terminates the client.   */  public void quit() {    try    {      closeConnection();    }    catch(IOException e) {}    System.exit(0);  }  /**   * Ask the server for a nice disconnection.s   */  public void askToDisconnect(){    try{      sendToServer("#logout");    } catch (IOException e1){      e1.getStackTrace();    }  }}//End of ChatClient class